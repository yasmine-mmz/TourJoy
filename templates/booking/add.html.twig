{% extends 'FrontOffice/navbar.html.twig' %}



{% block stylesheets %}
{{ parent() }}
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/fullcalendar/5.10.1/main.min.css" integrity="sha512-4rPgyv5iG0PZw8E+Pv6+stB+K2XJFDDx0e4qB7r6Jz0H6wStkEe7TMaCUp92nb2LxAYVJv2HlmL3Jkn3K8UXVcw==" crossorigin="anonymous" referrerpolicy="no-referrer" />
<style>
    /* Add your refined calendar styles here */
    .calendar {
        max-width: 600px;
        margin: 20px auto;
        border: 1px solid #ddd;
        border-radius: 8px;
        overflow: hidden;
        font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif;
    }
    .calendar table {
        width: 100%;
        border-collapse: collapse;
    }
    .calendar th {
        background-color: #4e555b;
        color: white;
        padding: 10px;
        text-align: center;
    }
    .calendar td {
        padding: 10px;
        text-align: center;
        border: 1px solid #ddd;
        background-color: #f8f9fa;
        cursor: pointer; /* Add cursor pointer for all cells */
    }
    .calendar td.empty {
        background-color: #fff;
        cursor: default; /* Remove cursor pointer for empty cells */
    }
    .calendar td.selectable:hover {
        background-color: #e0e0e0;
    }
    .calendar td.today {
        background-color: #48dbfb;
        color: white;
    }
    .calendar td.selected {
        background-color: #4caf50;
        color: white;
    }
    .calendar td.booked {
        background-color: #ff6b6b; /* Red color for booked dates */
        pointer-events: none; /* Prevent clicking */
    }

    .calendar-navigation {
        display: flex;
        justify-content: space-between;
        padding: 10px;
        background-color: #4e555b;
        color: white;
    }
    .calendar-navigation span {
        cursor: pointer;
        font-weight: bold;
    }
    .btn-black {
        background-color: #333;
        color: white;
        border: none;
        padding: 10px 20px;
        margin: 20px auto;
        display: block;
        width: 100%;
        max-width: 600px;
        font-size: 16px;
        border-radius: 4px;
    }
</style>
{% endblock %}

{% block body %}
<section class="mt-5 mb-5">
    <div class="container">
        <div class="row justify-content-center">
            <div class="col-lg-6">
                <h1 class="text-center">Book Guide</h1>
                <div class="calendar-navigation">
                    <span id="prevMonth">&#10094;</span>
                    <span id="currentMonthDisplay"></span>
                    <span id="nextMonth">&#10095;</span>
                </div>
                <div class="calendar">
                    <table id="calendarTable">
                        <thead>
                            <tr>
                                <th>Sun</th>
                                <th>Mon</th>
                                <th>Tue</th>
                                <th>Wed</th>
                                <th>Thu</th>
                                <th>Fri</th>
                                <th>Sat</th>
                            </tr>
                        </thead>
                        <tbody id="calendarBody">
                            <!-- Dynamically generated days will go here -->
                        </tbody>
                    </table>
                </div>
      
{{ form_start(form) }}
    {{ form_row(form.date, {
        'attr': {
            'min': "now"|date_modify("+1 day")|date("Y-m-d")
        }
    }) }}
                        <button type="submit" class="btn btn-black btn-block" id="bookBtn">Book</button>

{{ form_end(form) }}

            </div>
        </div>
    </div>
</section>
<script>
document.addEventListener('DOMContentLoaded', function() {
    const currentMonthDisplay = document.getElementById('currentMonthDisplay');
    const calendarBody = document.getElementById('calendarBody');
    let currentDate = new Date();
    currentDate.setDate(currentDate.getDate() + 1); // Start from tomorrow

    // Decode the JSON-encoded booked dates passed from the controller
    const bookedDates = JSON.parse('{{ bookedDates|raw }}');

    function isDateBooked(year, month, day) {
        // Format the date as 'Y-m-d'
        const dateString = `${year}-${String(month + 1).padStart(2, '0')}-${String(day).padStart(2, '0')}`;
        return bookedDates.includes(dateString);
    }

    function generateCalendar() {
        const today = new Date();
        const lastDay = new Date(currentDate.getFullYear(), currentDate.getMonth() + 1, 0).getDate();
        const firstDayIndex = currentDate.getDay();
        const nextDays = 7 - new Date(currentDate.getFullYear(), currentDate.getMonth() + 1, 0).getDay();

        calendarBody.innerHTML = ''; // Clear the calendar body

        // Add the empty cells for previous month's days
        for (let x = 0; x < firstDayIndex; x++) {
            calendarBody.appendChild(document.createElement('td')).classList.add('empty');
        }

        // Fill the calendar with the current month's days
        for (let day = 1; day <= lastDay; day++) {
            const cell = document.createElement('td');
            cell.innerText = day;
            const cellDate = new Date(currentDate.getFullYear(), currentDate.getMonth(), day);
            if (cellDate < today || isDateBooked(currentDate.getFullYear(), currentDate.getMonth(), day)) {
                cell.classList.add('booked');
            } else {
                cell.classList.add('empty'); // Use 'empty' or another class to indicate non-selectability
            }
            calendarBody.appendChild(cell);
        }

        // Add the empty cells for next month's days
        for (let j = 1; j <= nextDays; j++) {
            calendarBody.appendChild(document.createElement('td')).classList.add('empty');
        }

        // Organize cells into rows for a structured calendar view
        organizeCalendarRows();

        updateMonthYearDisplay();
    }

    function organizeCalendarRows() {
        const allCells = Array.from(calendarBody.getElementsByTagName('td'));
        calendarBody.innerHTML = ''; // Clear the calendar to reinsert the organized rows
        let weekRow = document.createElement('tr');
        allCells.forEach((cell, index) => {
            weekRow.appendChild(cell);
            if ((index + 1) % 7 === 0) {
                calendarBody.appendChild(weekRow); // Append the complete week row to the calendar
                weekRow = document.createElement('tr'); // Start a new week row
            }
        });

        // Append the last incomplete week row if there is one
        if (weekRow.hasChildNodes()) {
            calendarBody.appendChild(weekRow);
        }
    }

    function updateMonthYearDisplay() {
        const monthName = currentDate.toLocaleString('default', { month: 'long' });
        const year = currentDate.getFullYear();
        currentMonthDisplay.textContent = `${monthName} ${year}`;
    }

    document.getElementById('prevMonth').addEventListener('click', function() {
        currentDate.setMonth(currentDate.getMonth() - 1);
        generateCalendar();
    });

    document.getElementById('nextMonth').addEventListener('click', function() {
        currentDate.setMonth(currentDate.getMonth() + 1);
        generateCalendar();
    });

    generateCalendar(); // Initial call to set the calendar month and generate days
});

</script>

{% endblock %}